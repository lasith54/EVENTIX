name: eventix-api

services:
  # Single PostgreSQL Database
  eventix-db:
    image: postgres:15-alpine
    container_name: eventix-db
    environment:
      POSTGRES_DB: eventix
      POSTGRES_USER: eventix_user
      POSTGRES_PASSWORD: eventix_password
    ports:
      - "5432:5432"
    volumes:
      - eventix_db_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
      - ./sample-data.sql:/docker-entrypoint-initdb.d/sample-data.sql
    networks:
      - eventix-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U eventix_user -d eventix"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for Caching and Session Management
  redis:
    image: redis:7-alpine
    container_name: eventix-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - eventix-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # User Service - Fixed build context
  user-service:
    build:
      context: .  # Build from root directory
      dockerfile: services/user-service/Dockerfile
    container_name: user-service
    environment:
      - DATABASE_URL=postgresql://eventix_user:eventix_password@eventix-db:5432/eventix
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET_KEY=your-super-secret-jwt-key-change-in-production
      - JWT_ALGORITHM=HS256
      - JWT_ACCESS_TOKEN_EXPIRE_MINUTES=30
      - ENVIRONMENT=production
    ports:
      - "8000:8000"
    depends_on:
      eventix-db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - eventix-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Event Service - Fixed build context
  event-service:
    build:
      context: .  # Build from root directory
      dockerfile: services/event-service/Dockerfile
    container_name: event-service
    environment:
      - DATABASE_URL=postgresql://eventix_user:eventix_password@eventix-db:5432/eventix
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET_KEY=your-super-secret-jwt-key-change-in-production
      - ENVIRONMENT=production
    ports:
      - "8001:8001"
    depends_on:
      eventix-db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - eventix-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Booking Service - Fixed build context
  booking-service:
    build:
      context: .  # Build from root directory
      dockerfile: services/booking-service/Dockerfile
    container_name: booking-service
    environment:
      - DATABASE_URL=postgresql://eventix_user:eventix_password@eventix-db:5432/eventix
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET_KEY=your-super-secret-jwt-key-change-in-production
      - USER_SERVICE_URL=http://user-service:8000
      - EVENT_SERVICE_URL=http://event-service:8001
      - PAYMENT_SERVICE_URL=http://payment-service:8003
      - ENVIRONMENT=production
    ports:
      - "8002:8002"
    depends_on:
      eventix-db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - eventix-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8002/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Payment Service - Fixed build context
  payment-service:
    build:
      context: .  # Build from root directory
      dockerfile: services/payment-service/Dockerfile
    container_name: payment-service
    environment:
      - DATABASE_URL=postgresql://eventix_user:eventix_password@eventix-db:5432/eventix
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET_KEY=your-super-secret-jwt-key-change-in-production
      - STRIPE_SECRET_KEY=sk_test_your_stripe_key_here
      - STRIPE_PUBLISHABLE_KEY=pk_test_your_stripe_key_here
      - ENVIRONMENT=production
    ports:
      - "8003:8003"
    depends_on:
      eventix-db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - eventix-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8003/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # API Gateway - Fixed build context
  api-gateway:
    build:
      context: .  # Build from root directory
      dockerfile: services/api-gateway/Dockerfile
    container_name: api-gateway
    environment:
      - USER_SERVICE_URL=http://user-service:8000
      - EVENT_SERVICE_URL=http://event-service:8001
      - BOOKING_SERVICE_URL=http://booking-service:8002
      - PAYMENT_SERVICE_URL=http://payment-service:8003
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET_KEY=your-super-secret-jwt-key-change-in-production
      - RATE_LIMIT_PER_MINUTE=100
      - ENVIRONMENT=production
    ports:
      - "8080:8080"
    depends_on:
      - user-service
      - event-service
      - booking-service
      - payment-service
    networks:
      - eventix-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx Load Balancer
  nginx:
    image: nginx:alpine
    container_name: eventix-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
    depends_on:
      - api-gateway
    networks:
      - eventix-network

  # Monitoring with Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: eventix-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - eventix-network

  # Grafana for Monitoring Dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: eventix-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    networks:
      - eventix-network

volumes:
  eventix_db_data:
  redis_data:
  prometheus_data:
  grafana_data:

networks:
  eventix-network:
    driver: bridge