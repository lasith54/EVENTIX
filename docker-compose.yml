name: eventix-api
services:          
  rabbitmq:
    image: rabbitmq:3.13-management
    hostname: rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: eventix
      RABBITMQ_DEFAULT_PASS: eventix123
      RABBITMQ_DEFAULT_VHOST: /
    ports:
      - "5672:5672"    # AMQP port
      - "15672:15672"  # Management UI port
    volumes:
      - rabbitmq-data:/var/lib/rabbitmq
    networks:
      - net
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 30s
      timeout: 10s
      retries: 5

  user-db:
    image: postgres:15
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: user-db
    ports:
      - "5432:5432"
    volumes:
      - user-db-data:/var/lib/postgresql/data
    networks:
      - net
    healthcheck: 
      test: ["CMD-SHELL", "pg_isready -U postgres -d user-db"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  event-db:
    image: postgres:15
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: event-db
    ports:
      - "5433:5432"
    volumes:
      - event-db-data:/var/lib/postgresql/data
    networks:
      - net
    healthcheck: 
      test: ["CMD-SHELL", "pg_isready -U postgres -d event-db"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  booking-db:
    image: postgres:15
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: booking-db
    ports:
      - "5434:5432"
    volumes:
      - booking-db-data:/var/lib/postgresql/data
    networks:
      - net
    healthcheck: 
      test: ["CMD-SHELL", "pg_isready -U postgres -d booking-db"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  payment-db:
    image: postgres:15
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: payment-db
    ports:
      - "5435:5432"
    volumes:
      - payment-db-data:/var/lib/postgresql/data
    networks:
      - net
    healthcheck: 
      test: ["CMD-SHELL", "pg_isready -U postgres -d payment-db"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  user-service:
    build:
      context: .
      dockerfile: ./services/user_service/Dockerfile
    environment:
      DATABASE_URL: postgres://postgres:postgres@user-db:5432/user-db
      RABBITMQ_URL: amqp://eventix:eventix123@rabbitmq:5672/
    ports:
      - "8000:8000"
    depends_on:
      user-db:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - net

  event-service:
    build:
      context: .
      dockerfile: ./services/event_service/Dockerfile
    environment:
      DATABASE_URL: postgres://postgres:postgres@event-db:5432/event-db
      RABBITMQ_URL: amqp://eventix:eventix123@rabbitmq:5672/
    ports:
      - "8001:8001"
    depends_on:
      event-db:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - net

  booking-service:
    build:
      context: .
      dockerfile: ./services/booking_service/Dockerfile
    environment:
      DATABASE_URL: postgres://postgres:postgres@booking-db:5432/booking-db
      RABBITMQ_URL: amqp://eventix:eventix123@rabbitmq:5672/
    ports:
      - "8002:8002"
    depends_on:
      booking-db:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - net

  payment-service:
    build:
      context: .
      dockerfile: ./services/payment_service/Dockerfile
    environment:
      DATABASE_URL: postgres://postgres:postgres@payment-db:5432/payment-db
      RABBITMQ_URL: amqp://eventix:eventix123@rabbitmq:5672/
    ports:
      - "8003:8003"
    depends_on:
      payment-db:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - net

  api-gateway:
    build:
      context: .
      dockerfile: ./services/api-gateway/Dockerfile
    environment:
      USER_SERVICE_URL: http://user-service:8000
      EVENT_SERVICE_URL: http://event-service:8001
      BOOKING_SERVICE_URL: http://booking-service:8002
      PAYMENT_SERVICE_URL: http://payment-service:8003
    ports:
      - "8080:8080"
    depends_on:
      - user-service
      - event-service
      - booking-service
      - payment-service
    networks:
      - net

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "3000:80"
    depends_on:
      - api-gateway
    networks:
      - net
    environment:
      - REACT_APP_API_URL=http://localhost:8080/api
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 5s

volumes:
    user-db-data:
      driver: local
    event-db-data:
      driver: local
    booking-db-data:
      driver: local
    payment-db-data:
      driver: local
    rabbitmq-data:
      driver: local

networks:
    net:
      driver: bridge